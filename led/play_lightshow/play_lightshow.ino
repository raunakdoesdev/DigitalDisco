#include "FastLED.h"
#include <string.h>

// how many leds in your strip?
#define NUM_LEDS 60
#define DATA_PIN 19  // 
#define COLOR_ORDER GRB
CRGB leds[NUM_LEDS];
float switch_time;
float show_time;

const uint8_t IDLE = 0;
const uint8_t BLUE = 1;
const uint8_t GREEN = 2;
const uint8_t RED = 3;
const uint8_t COLOR = 4;
const uint8_t RETAIN = 5;
uint8_t state;
float start;
uint8_t next;
int notes;  // "index" into times[]; notes=n --> we are on nth note
float freq;
int dot;
int time_size;
double timestamps[5000];

bool song_play;
bool processed;

//-----------------------------------------------------
const char NETWORK[] = "MIT GUEST";
const char PASSWORD[] = "";

const uint16_t RESPONSE_TIMEOUT = 6000;
const uint16_t IN_BUFFER_SIZE = 3500; //size of buffer to hold HTTP request
const uint16_t OUT_BUFFER_SIZE = 10000; //size of buffer to hold HTTP response
char request_buffer[IN_BUFFER_SIZE];
char response_buffer[OUT_BUFFER_SIZE];
//----------------------------------------------------------

void setup() {
  Serial.begin(115200);               // Set up serial port
  FastLED.addLeds<WS2811, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setBrightness(50);
  //float times[] = {0.0, 0.5, 1.0, 2.0, 4.0, 8.0};  // integrate with alyssa's work (i.e. somehow receive times[])
  song_play = false;
  processed = false;

  switch_time = millis();
  show_time = millis();
  state = IDLE;
  notes = 1;
  dot = 0;  // for light_show_2 (make sure to take care of initialization = 0 at every song)
  show_time = millis();

  strcpy(response_buffer, "751,0.0000,0.2206,0.6037,0.8707,1.1378,1.5557,1.7995,2.0782,2.3336,2.6122,2.8677,3.1231,3.3901,3.6688,3.9126,4.2028,4.4466,4.7253,4.9807,5.2593,5.7934,6.0372,6.3158,6.5712,6.8499,7.0937,7.3723,7.6278,7.9064,8.1618,8.4172,8.6843,8.9629,9.2183,9.4737,10.0194,10.2864,10.5535,10.7973,11.0759,11.3313,11.6100,11.8538,12.1440,12.3878,12.6665,12.9219,13.2005,13.4444,13.7114,14.2571,14.5125,14.7679,15.0349,15.3252,15.5690,15.8476,16.1030,16.3701,16.6255,16.9041,17.1595,17.4266,17.6820,17.9374,18.4947,18.7385,18.9939,19.2726,19.5512,19.7950,20.0737,20.3407,20.6077,20.8631,21.1185,21.3856,21.6642,22.1751,22.4421,22.7323,22.9878,23.2548,23.4986,23.7888,24.0327,24.3113,24.5551,24.8454,25.0892,25.3678,25.6116,25.8902,26.1457,26.4243,26.6797,26.9584,27.2138,27.4692,27.7246,28.0149,28.2587,28.5257,28.7927,29.0830,29.3152,29.5822,29.8493,30.1279,30.4181,30.6620,30.9058,31.1844,31.4398,31.7185,31.9623,32.2525,32.4963,32.7634,33.0304,33.3090,33.5644,33.8199,34.0985,34.3655,34.6093,34.8996,35.1434,35.4337,35.6775,35.9561,36.2115,36.4902,36.7340,37.0126,37.2680,37.5351,37.7905,38.0459,38.3245,38.6032,38.8470,39.1140,39.3810,39.6597,39.9151,40.1705,40.4376,40.7278,40.9716,41.2502,41.4941,41.7727,42.0281,42.3068,42.5622,42.8292,43.0846,43.3400,43.6071,43.8973,44.1411,44.4198,44.6752,44.9422,45.2093,45.4647,45.7201,46.0103,46.3122,46.5444,46.7998,47.0668,47.3223,47.6009,47.8447,48.1350,48.4020,48.6574,48.9128,49.1915,49.4353,49.7139,49.9810,50.2480,50.4918,50.7588,51.0491,51.3045,51.5599,51.8153,52.0940,52.3610,52.6164,52.8951,53.1505,53.4059,53.6729,53.9516,54.1838,54.4856,54.7410,55.0081,55.2403,55.5305,55.7976,56.0646,56.3084,56.5986,56.8424,57.1095,57.3765,57.6435,57.9106,58.1660,58.4330,58.7117,58.9671,59.2457,59.4895,59.7682,60.0236,60.2790,60.8363,61.0801,61.3587,61.6025,61.8928,62.1366,62.4152,62.6823,62.9377,63.1931,63.4601,63.7272,64.0058,64.5399,64.7837,65.0739,65.3177,65.5964,65.8518,66.1304,66.3742,66.6529,66.9083,67.1869,67.4307,67.6862,67.9648,68.2434,68.4873,68.7659,69.0329,69.3000,69.5438,69.8108,70.0778,70.3681,70.6119,70.8905,71.1459,71.4130,71.6568,71.9470,72.1908,72.4695,73.0035,73.2473,73.5376,73.7814,74.0600,74.3155,74.5941,74.8379,75.1166,75.3720,75.6506,75.9293,76.1615,76.4749,76.7071,76.9625,77.2412,77.4850,77.7752,78.0190,78.2977,78.5415,78.8317,79.0756,79.3542,79.6212,79.8766,80.1321,80.4107,80.6661,80.9448,81.1886,81.4672,81.7226,82.0129,82.2451,82.5353,82.7791,83.0694,83.3016,83.5686,83.8124,84.1143,84.3581,84.6483,84.9038,85.1708,85.4262,85.6816,85.9719,86.2389,86.4943,86.7614,87.0284,87.3070,87.5508,87.8063,88.0733,88.3519,88.6654,88.8860,89.1298,89.4084,89.6639,89.9193,90.1979,90.4766,90.7204,90.9990,91.2544,91.5331,91.7885,92.0555,92.3341,92.5896,92.8450,93.1004,93.3674,93.6461,93.8899,94.1569,94.4472,94.7026,94.9696,95.2134,95.5037,95.7707,96.0145,96.2932,96.5370,96.8272,97.1175,97.3497,97.5935,97.8721,98.1275,98.3829,98.6616,98.9402,99.1956,99.4627,99.7297,99.9967,100.2405,100.5076,100.8094,101.0532,101.3203,101.5873,101.8427,102.1098,102.3652,102.6206,102.8992,103.1663,103.4333,103.7003,103.9557,104.2344,104.4782,104.7568,105.0006,105.2909,105.5927,105.8133,106.0804,106.3474,106.6028,106.8582,107.1485,107.4039,107.6593,107.9147,108.1934,108.4720,108.7158,108.9945,109.2731,109.5285,109.7723,110.0510,110.3064,110.5734,110.8288,111.0843,111.3861,111.6415,111.8854,112.1524,112.4426,112.6980,112.9419,113.2089,113.4759,113.7546,114.0448,114.2886,114.5324,114.8111,115.0781,115.3219,115.6238,115.8792,116.1230,116.4016,116.6571,116.9357,117.1679,117.4581,117.7252,117.9922,118.2592,118.5030,118.7701,119.0487,119.3041,119.5595,120.0936,120.3606,120.6393,120.8831,121.1617,121.4171,121.6958,121.9396,122.2182,122.4737,122.7523,122.9961,123.2863,123.5302,123.7972,124.0642,124.3312,124.5983,124.8769,125.1207,125.3878,125.6432,125.9102,126.1772,126.4559,126.7113,126.9899,127.2337,127.5124,127.7678,128.0348,128.3019,128.5689,128.8243,129.1146,129.3468,129.6254,129.8808,130.1478,130.4149,130.6935,130.9489,131.2276,131.4830,131.7500,132.0054,132.2841,132.5395,132.8065,133.0620,133.3406,133.5844,133.8630,134.1185,134.3855,134.6525,134.9312,135.1866,135.4420,135.7090,135.9877,136.2431,136.5217,136.7655,137.0326,137.2880,137.5666,137.8104,138.1007,138.3561,138.6231,138.8669,139.1572,139.4010,139.6912,139.9351,140.2137,140.7478,140.9916,141.2702,141.5372,141.8043,142.3267,142.5821,142.8608,143.1046,143.3832,143.6270,143.9173,144.1727,144.4513,144.6951,144.9738,145.2060,145.5078,145.7749,146.0187,146.2857,146.5644,146.8082,147.0984,147.3306,147.6209,147.8647,148.1549,148.3987,148.6774,149.2114,149.7455,149.9893,150.2679,150.5117,150.8020,151.0458,151.3128,151.8585,152.1488,152.3693,152.6364,152.9150,153.1588,153.4491,153.6929,153.9831,154.2269,154.5056,154.7610,155.0396,155.2718,155.5505,155.8291,156.1078,156.3400,156.6302,156.8740,157.1527,157.3965,157.6867,157.9305,158.2208,158.4646,158.7432,158.9870,159.2773,159.5211,159.7997,160.0435,160.3338,160.5776,160.8562,161.1117,161.3903,161.6341,161.9011,162.1682,162.4468,162.7138,162.9576,163.2247,163.5149,163.7587,164.0141,164.3044,164.5598,164.8617,165.0939,165.3493,165.6163,165.8717,166.1504,166.3942,166.6844,166.9399,167.2069,167.4623,167.7410,167.9848,168.2634,168.5188,168.7975,169.0645,169.3083,169.5753,169.8540,170.1094,170.3648,170.6434,170.9105,171.1775,171.4445,171.7116,171.9786,172.2224,172.5010,172.7449,173.0351,173.2905,173.5576,173.7898,174.0916,174.3470,174.6257,174.8579,175.1481,175.3919,175.6590,175.9260,176.2046,176.4600,176.7155,176.9825,177.2611,177.5166,177.7720,178.0390,178.3176,178.5731,178.8285,179.1071,179.3741,179.6528,179.9082,180.1752,180.4423,180.6861,180.9647,181.2201,181.4872,181.7426,182.0096,182.2766,182.5553,182.8107,183.0893,183.3332,183.6234,183.8904,184.1459,184.4013,184.6799,184.9237,185.2024,185.4462,185.7364,186.0034,186.2589,186.5143,186.7929,187.0367,187.3038,187.5940,187.8494,188.1165,188.3835,188.6505,188.9176,189.1614,189.4168,189.6838,189.9741,190.2411,190.4965,190.7403,191.0190,191.2860,191.5530,191.7968,192.0871,192.3309,192.6095,192.8766,193.1436,193.3874,193.6776,193.9331,194.2001,194.4671,194.7341,194.9896,195.2682,195.5120,195.7907,196.0461,196.3247,196.5801,196.8356,197.1142,197.3928,197.6366,197.9153,198.1591,198.4377,198.6815,198.9718,199.2156,199.4942,200.0283,200.5624,201.0848,201.6189,202.1413,202.6754,203.1862,203.7319,204.2427,204.7884,211.5454");
}

////////////////////Beats, Frequency////////////////////////////////////////
// frequency passed as 2 * (one of 128 pitch bins)
//float timestamps[] = {0.0 * 1000, 2.0 * 1000, 4.0 * 1000, 6.0 * 1000, 8.0 * 1000, 10.0 * 1000, 12.0 * 1000, 14.0 * 1000, 16.0 * 1000, 18.0 * 1000, 20.0 * 1000, 22.0 * 1000, 24.0 * 1000}; // integrate with alyssa's work (i.e. somehow receive times[])
//float freqs[] = { // toy example
//  0, 32, 64, 96, 128, 160, 192, 224, 0, 32, 64, 96, 128, 160, 192, 224    //beat 4
//};
float freqs[5000] = {
  533, 0.0000, 0.5921, 1.5441, 2.0666, 2.6006, 3.1231, 3.6571, 4.1796, 4.7137, 5.2477, 5.7818, 6.3042, 6.8383, 7.0821, 7.3607, 7.8948, 8.4172, 8.6727, 8.9513, 9.2067, 9.4621, 10.0078, 10.5302, 11.0759, 11.5984, 12.1324, 12.6549, 13.1889, 13.7114, 14.2454, 14.7679, 15.3136, 15.5574, 15.8244, 16.3701, 16.8925, 17.4150, 17.6820, 17.9606, 18.4831, 18.7385, 18.9939, 19.2726, 19.5396, 19.7950, 20.0620, 20.3291, 20.5961, 20.8515, 21.1185, 21.6526, 22.1751, 22.7207, 22.9761, 23.2316, 23.4870, 23.7772, 24.0210, 24.2997, 24.5435, 24.8337, 25.3562, 25.6116, 25.8902, 26.1457, 26.4127, 26.6797, 26.9468, 27.2022, 27.4692, 27.7246, 28.0033, 28.2587, 28.5257, 28.7927, 29.0714, 29.3152, 29.5822, 29.8493, 30.1279, 30.6503, 31.1844, 31.4398, 31.7068, 32.2409, 32.4963, 32.7634, 33.2974, 33.5644, 33.8199, 34.0985, 34.3539, 34.5977, 34.8880, 35.4220, 35.9445, 36.4785, 36.7224, 37.0010, 37.5351, 37.7905, 38.0575, 38.3245, 38.5916, 39.1140, 39.3694, 39.6597, 39.9035, 40.1705, 40.7162, 40.9600, 41.2270, 41.4941, 41.7611, 42.0165, 42.2951, 42.5506, 42.8292, 43.3400, 43.6071, 43.8857, 44.4082, 44.6636, 44.9422, 45.4647, 45.7201, 45.9987, 46.5212, 46.7766, 47.0552, 47.5893, 48.1234, 48.3904, 48.6458, 48.9012, 49.1799, 49.4237, 49.7023, 49.9810, 50.2364, 50.7588, 51.0142, 51.2929, 51.5483, 51.8037, 52.0940, 52.3494, 52.8718, 53.1505, 53.4059, 53.6613, 53.9400, 54.1838, 54.4740, 54.7410, 54.9965, 55.2287, 55.5305, 56.0530, 56.5870, 56.8308, 57.1095, 57.3649, 57.6435, 57.8757, 58.1660, 58.7000, 58.9555, 59.2225, 59.4895, 59.7566, 60.0236, 60.2906, 60.8247, 61.0685, 61.3471, 61.8812, 62.1366, 62.4036, 62.9377, 63.1815, 63.4601, 63.7272, 63.9942, 64.5283, 65.0623, 65.3061, 65.5732, 66.1188, 66.3626, 66.6413, 67.1753, 67.4191, 67.6862, 68.2318, 68.4873, 68.7543, 69.2883, 69.8108, 70.0778, 70.3449, 70.6003, 70.8673, 71.4014, 71.6568, 71.9238, 72.1908, 72.4695, 72.9919, 73.5260, 73.7814, 74.0484, 74.5825, 74.8379, 75.1049, 75.6390, 76.1615, 76.6955, 77.2180, 77.7636, 78.2861, 78.8201, 79.0639, 79.3310, 79.6096, 79.8766, 80.1321, 80.3991, 80.9332, 81.4556, 82.0013, 82.2451, 82.5121, 82.7791, 83.0462, 83.3016, 83.5686, 84.1027, 84.3581, 84.6367, 84.8922, 85.1708, 85.4262, 85.6816, 85.9603, 86.2273, 86.7498, 87.0168, 87.2838, 87.8063, 88.0733, 88.3403, 88.8744, 89.1530, 89.3968, 89.9193, 90.4649, 90.7204, 90.9874, 91.5215, 91.7769, 92.0439, 92.3341, 92.5780, 93.1004, 93.6345, 93.8899, 94.1569, 94.4472, 94.6910, 95.2134, 95.4921, 95.7475, 96.2699, 96.5370, 96.8156, 97.3264, 97.5935, 97.8721, 98.1159, 98.3829, 98.9286, 99.1840, 99.4511, 99.7297, 99.9851, 100.2289, 100.5076, 101.0416, 101.3087, 101.5641, 101.8195, 102.0981, 102.3536, 102.6090, 102.8876, 103.1546, 103.6887, 103.9441, 104.2228, 104.7336, 105.0006, 105.2793, 105.8017, 106.0688, 106.3358, 106.8466, 107.1369, 107.3923, 107.6477, 107.9263, 108.1818, 108.4604, 108.7158, 108.9712, 109.2615, 109.5053, 110.0394, 110.5734, 110.8288, 111.0843, 111.3745, 111.6299, 112.1524, 112.4310, 112.6864, 113.2089, 113.4643, 113.7429, 114.2770, 114.5208, 114.7995, 115.3219, 115.8676, 116.1230, 116.3900, 116.6571, 116.9241, 117.1679, 117.4465, 117.7252, 117.9806, 118.2360, 118.5030, 118.7585, 119.0371, 119.2925, 119.5712, 120.0936, 120.3490, 120.6277, 121.1617, 121.4055, 121.6726, 121.9396, 122.2182, 122.7407, 123.2747, 123.7972, 124.3312, 124.5867, 124.8537, 125.3994, 125.6432, 125.9102, 126.1772, 126.4443, 126.9783, 127.5124, 128.0348, 128.2902, 128.5805, 128.8243, 129.0913, 129.3468, 129.6254, 129.8808, 130.1478, 130.4149, 130.6819, 131.2160, 131.7500, 132.2725, 132.8065, 133.0620, 133.3290, 133.5844, 133.8746, 134.1068, 134.3855, 134.6409, 134.9195, 135.1750, 135.4420, 135.6974, 135.9761, 136.2315, 136.5101, 136.7655, 137.0326, 137.5550, 138.0891, 138.6115, 139.1456, 139.6680, 140.2021, 140.7361, 141.2586, 141.7810, 142.3267, 142.8492, 143.3832, 143.9057, 144.4397, 144.9622, 145.4962, 146.0187, 146.5527, 147.0868, 147.6209, 148.1433, 148.6774, 149.1998, 149.7339, 150.2563, 150.7904, 151.3128, 151.8469, 152.3693, 152.9034, 153.4375, 153.9715, 154.4940, 155.0280, 155.5505, 156.0845, 156.6070, 157.1410, 157.6751, 158.2092, 158.7316, 159.2657, 159.7881, 160.3222, 160.5660, 160.8446, 161.1000, 161.3787, 161.9011, 162.1566, 162.4352, 162.9576, 163.5033, 164.0141, 164.5598, 165.0823, 165.3377, 165.6163, 166.1272, 166.6728, 167.1953, 167.7293, 168.2518, 168.7859, 169.3083, 169.8424, 170.3648, 170.8989, 171.4329, 171.7000, 171.9670, 172.4894, 173.0235, 173.5459, 173.7898, 174.0800, 174.6024, 175.1365, 175.6590, 176.1930, 176.7155, 177.2611, 177.7720, 178.3176, 178.5615, 178.8401, 179.3625, 179.8966, 180.4307, 180.9531, 181.4872, 182.0096, 182.5437, 183.0777, 183.6118, 184.1342, 184.6683, 185.1907, 185.7248, 186.2473, 186.7813, 187.3038, 187.8378, 188.3603, 188.6389, 188.8943, 189.4168, 189.6838, 189.9624, 190.4849, 190.7287, 191.0190, 191.5414, 192.0755, 192.5979, 193.1320, 193.6544, 194.1885, 194.7109, 194.9780, 195.2566, 195.7790, 196.3131, 196.8356, 197.3812, 197.8921, 198.4261, 198.9602, 199.4942, 200.0167, 200.5507, 201.0732, 211.5454,
  532, 248, 54, 151, 255, 139, 139, 139, 224, 127, 78, 224, 212, 121, 139, 97, 139, 139, 170, 97, 242, 255, 151, 139, 139, 121, 139, 151, 127, 127, 151, 151, 139, 139, 139, 170, 170, 242, 151, 248, 224, 151, 109, 194, 248, 151, 85, 121, 212, 139, 139, 97, 97, 12, 36, 182, 194, 200, 109, 151, 139, 212, 145, 182, 212, 182, 182, 182, 182, 151, 109, 48, 151, 151, 170, 212, 212, 255, 109, 212, 139, 30, 242, 42, 109, 242, 242, 242, 255, 255, 255, 255, 218, 218, 224, 218, 224, 224, 182, 194, 139, 182, 182, 200, 255, 255, 255, 97, 0, 109, 224, 121, 127, 42, 200, 212, 78, 236, 242, 151, 127, 248, 194, 212, 212, 121, 194, 236, 242, 242, 218, 127, 200, 200, 121, 218, 206, 236, 139, 24, 236, 255, 218, 127, 151, 200, 200, 151, 139, 212, 182, 182, 121, 127, 242, 242, 121, 224, 224, 212, 242, 242, 103, 224, 224, 224, 242, 236, 242, 242, 255, 242, 151, 242, 242, 255, 133, 170, 224, 212, 212, 194, 182, 188, 139, 24, 182, 182, 255, 151, 255, 218, 151, 212, 236, 139, 78, 255, 255, 170, 127, 151, 182, 255, 66, 121, 109, 182, 139, 139, 242, 255, 236, 127, 224, 242, 242, 176, 255, 248, 242, 242, 242, 255, 224, 236, 236, 255, 218, 255, 255, 97, 97, 157, 188, 224, 255, 200, 157, 236, 78, 255, 255, 242, 151, 242, 248, 194, 212, 212, 206, 194, 236, 242, 224, 224, 182, 200, 200, 218, 206, 242, 139, 24, 236, 242, 97, 151, 212, 200, 151, 127, 212, 236, 109, 139, 242, 139, 224, 236, 224, 212, 242, 242, 151, 224, 224, 176, 236, 236, 242, 236, 255, 242, 151, 182, 127, 248, 194, 212, 212, 139, 194, 236, 242, 242, 218, 182, 182, 200, 200, 139, 218, 206, 236, 139, 24, 236, 255, 127, 127, 212, 242, 151, 151, 212, 236, 139, 127, 242, 127, 224, 236, 212, 242, 242, 103, 224, 224, 224, 139, 236, 236, 236, 242, 255, 242, 127, 242, 97, 97, 103, 103, 103, 97, 97, 218, 176, 176, 24, 97, 97, 97, 97, 97, 103, 72, 218, 176, 194, 157, 24, 91, 182, 224, 248, 182, 127, 248, 248, 218, 176, 176, 24, 97, 151, 224, 248, 218, 224, 248, 78, 170, 151, 127, 176, 176, 230, 12, 6, 255, 200, 224, 212, 194, 188, 188, 188, 182, 255, 255, 218, 212, 236, 236, 255, 255, 200, 182, 255, 121, 182, 182, 188, 255, 236, 224, 139, 218, 151, 255, 255, 218, 224, 224, 236, 182, 200, 255, 255, 97, 139, 224, 255, 200, 212, 236, 236, 242, 151, 224, 248, 212, 218, 194, 236, 242, 242, 182, 127, 200, 218, 236, 139, 139, 236, 151, 200, 200, 139, 212, 236, 139, 242, 139, 224, 224, 212, 242, 224, 224, 236, 236, 236, 127, 127, 206, 248, 212, 212, 206, 236, 242, 188, 182, 200, 218, 236, 121, 236, 242, 151, 212, 224, 194, 212, 236, 127, 255, 255, 224, 224, 224, 212, 242, 224, 224, 236, 242, 236, 218, 127, 182, 248, 212, 212, 206, 236, 242, 194, 127, 200, 0
};


void loop() {
  //process and parse timestamps string
  if (processed == false) {
    char* current = strtok(response_buffer, ",");
    time_size = atoi(current);
    int i = 0;
    current = strtok(NULL, ",");
    while (current != NULL) {
      timestamps[i] = 1000 * atof(current); //gets time in millis
      i++;
      current = strtok(NULL, ",");
    }
    processed = true;
    Serial.println("Starting light show in 3...");
    delay(1000);
    Serial.println("2...");
    delay(1000);
    Serial.println("1...");
    delay(1000);
    Serial.println("go!");
  }
  light_show_1(timestamps);
  //play_song(timestamps);
  //  }
}

void light_show_1(double* timestamp) {
  FastLED.show();
  switch (state) {
    case IDLE:
      state = COLOR;
      start = millis();
      break;
    case COLOR:
      freq = freqs[notes - 1];  // len(freq) = len(beats-1)
      Serial.printf("freq: %f", freq);
      for (int dot = 0; dot < NUM_LEDS; dot++) {
        leds[dot] = CHSV(freq, 255, 127);
      }
      state = RETAIN;
      break;
    case RETAIN:
      while (millis() - start < timestamp[notes]) {
        FastLED.show();
      }
      notes = notes + 1;
      if (notes > 500) {
        //FastLED.clear(); // end of show
        next = IDLE;
        break;
      }
      state = COLOR;
      Serial.printf("Switched colors: time = %f, freq = %f \n", millis() - start, freq);
      break;
  }
}


void light_show_2(double* timestamp) {
  FastLED.show();
  switch (state) {
    case IDLE:
      state = COLOR;
      start = millis();
      break;
    case COLOR:
      freq = freqs[notes - 1];  // len(freq) = len(beats-1)
      leds[dot] = CHSV(freq, 255, 127); // change single dot (starts at 0)
      leds[dot + 1] = CHSV(freq, 255, 127);
      state = RETAIN;
      break;
    case RETAIN:
      while (millis() - start < timestamp[notes]) {
        FastLED.show();
      }
      notes = notes + 1;
      dot = dot + 2;
      if (notes > 200) {
        //FastLED.clear(); // end of show
        next = IDLE;
        break;
      }
      state = COLOR;
      Serial.printf("Switched colors: time = %f, freq = %f \n", millis() - start, freq);
      break;
  }
}
